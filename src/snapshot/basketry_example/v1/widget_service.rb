# This code was generated by @basketry/sorbet@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/sorbet: https://github.com/basketry/sorbet#readme

# frozen_string_literal: true

# typed: strict

# frozen_string_literal: true

module BasketryExample::V1
  module WidgetService
    extend T::Sig
    extend T::Helpers

    interface!

    sig do
      abstract.params(
        body: T.nilable(BasketryExample::V1::Types::CreateWidgetBody)
      ).void
    end
    #
    # @param [BasketryExample::V1::Types::CreateWidgetBody, nil] body The new widget
    #
    def create_widget(body: nil)
    end

    sig do
      abstract.params(
        id: String
      ).void
    end
    #
    # @param [String] id The widget ID
    #
    def delete_widget_foo(id:)
    end

    sig do
      abstract.params(
        id: String
      ).returns(
        BasketryExample::V1::Types::Widget
      )
    end
    #
    # @param [String] id The widget ID
    #
    # @return [BasketryExample::V1::Types::Widget]
    #
    def get_widget_foo(id:)
    end

    sig { abstract.returns(BasketryExample::V1::Types::Widget) }
    #
    # @return [BasketryExample::V1::Types::Widget]
    #
    def get_widgets
    end

    sig { abstract.void }
    def put_widget
    end
  end
end
