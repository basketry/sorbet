# This code was generated by @basketry/sorbet@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.
#
# To make changes to the contents of this file:
# 1. Edit source/path.ext
# 2. Run the Basketry CLI
#
# About Basketry: https://github.com/basketry/basketry/wiki
# About @basketry/sorbet: https://github.com/basketry/sorbet#readme

# frozen_string_literal: true

# typed: strict

module BasketryExample::V1::Utils
  module ServiceLocator
    extend T::Sig
    extend T::Helpers

    interface!

    sig { abstract.returns(BasketryExample::V1::GizmoService) }
    def gizmo_service
    end

    sig { abstract.returns(BasketryExample::V1::WidgetService) }
    def widget_service
    end

    sig { abstract.returns(BasketryExample::V1::ExhaustiveService) }
    def exhaustive_service
    end

    sig { abstract.returns(BasketryExample::V1::AuthPermutationService) }
    def auth_permutation_service
    end
  end
end

# The following template can be used to create an implementation of the ServiceLocator.
# Note that if the original service definition is updated, this template may also be
# updated; however, your implementation will remain as-is. In such a case, you will need
# to manually update your implementation to match the ServiceLocator interface.

# class TemplateServiceLocator
#   extend T::Sig
#
#   include BasketryExample::V1::Utils::ServiceLocator
#
#   sig { override.returns(BasketryExample::V1::GizmoService) }
#   def gizmo_service
#     raise NotImplementedError
#   end
#
#   sig { override.returns(BasketryExample::V1::WidgetService) }
#   def widget_service
#     raise NotImplementedError
#   end
#
#   sig { override.returns(BasketryExample::V1::ExhaustiveService) }
#   def exhaustive_service
#     raise NotImplementedError
#   end
#
#   sig { override.returns(BasketryExample::V1::AuthPermutationService) }
#   def auth_permutation_service
#     raise NotImplementedError
#   end
# end
